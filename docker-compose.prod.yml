version: '3.8'

services:
  # Backend API Service
  backend:
    # Use the pre-built image from Docker Hub
    image: sjafferali/meditrack-backend:latest
    container_name: meditrack-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql://meditrack:meditrack@postgres:5432/meditrack}
      # Security
      SECRET_KEY: ${SECRET_KEY:?Please set SECRET_KEY environment variable}
      # Production settings
      ENVIRONMENT: production
      DEBUG: "false"
      # CORS configuration - set to your frontend domain
      CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com,http://localhost:3000}
    volumes:
      # Persistent data storage
      - backend-data:/app/data
    networks:
      - meditrack-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend Web Service
  frontend:
    # Use the pre-built image from Docker Hub
    image: sjafferali/meditrack-frontend:latest
    container_name: meditrack-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # API URL - can be customized for different deployments
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - meditrack-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (recommended for production)
  postgres:
    image: postgres:15-alpine
    container_name: meditrack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-meditrack}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-meditrack}
      POSTGRES_DB: ${POSTGRES_DB:-meditrack}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - meditrack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meditrack}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (recommended for production)
  nginx:
    image: nginx:alpine
    container_name: meditrack-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - meditrack-network

  # Optional: Database backup service
  backup:
    image: postgres:15-alpine
    container_name: meditrack-backup
    profiles: ["backup"]  # Only runs when explicitly enabled
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-meditrack}
    volumes:
      - ./backups:/backups
    command: >
      sh -c 'while true; do
        pg_dump -h postgres -U ${POSTGRES_USER:-meditrack} ${POSTGRES_DB:-meditrack} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name "backup_*.sql" -mtime +7 -delete
        echo "Backup completed at $$(date)"
        sleep 86400
      done'
    networks:
      - meditrack-network
    depends_on:
      - postgres

networks:
  meditrack-network:
    driver: bridge

volumes:
  backend-data:
    driver: local
  postgres-data:
    driver: local
  nginx-cache:
    driver: local