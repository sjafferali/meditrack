name: Main Branch CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests with coverage
      run: |
        cd backend
        python -m pytest -v --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run tests with coverage
      run: |
        cd frontend
        npm run test:coverage -- --ci --maxWorkers=2
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Backend Linting
  backend-lint:
    runs-on: ubuntu-latest
    name: Backend Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        
    - name: Run Black
      run: |
        cd backend
        black --check .
        
    - name: Run isort
      run: |
        cd backend
        isort --check-only .
        
    - name: Run Flake8
      run: |
        cd backend
        flake8 .
        
    - name: Run MyPy
      run: |
        cd backend
        pip install -r requirements.txt
        mypy app/ --ignore-missing-imports

  # Frontend Linting
  frontend-lint:
    runs-on: ubuntu-latest
    name: Frontend Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint errors for now
        
    - name: Run TypeScript check
      run: |
        cd frontend
        npx tsc --noEmit --project tsconfig.json || true  # Don't fail on TS errors for now

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Check Python dependencies
      run: |
        pip install safety
        cd backend
        safety check -r requirements.txt --json || true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check npm dependencies
      run: |
        cd frontend
        npm audit --json || true

  # Docker Build (only on main/develop push)
  docker-build:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-lint, frontend-lint, security-scan]
    name: Docker Build & Push
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Build frontend first to ensure static files are generated
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Copy frontend build to backend static directory
      run: |
        # Clear any existing static files
        rm -rf backend/app/static
        
        # Create simplified directory structure
        mkdir -p backend/app/static/js
        mkdir -p backend/app/static/css
        mkdir -p backend/app/static/assets
        
        # Copy index.html and other root files
        cp frontend/build/index.html backend/app/static/
        cp frontend/build/asset-manifest.json backend/app/static/
        
        # Copy JS files
        cp -r frontend/build/static/js/* backend/app/static/js/
        
        # Copy CSS files
        cp -r frontend/build/static/css/* backend/app/static/css/
        
        # Copy the person-initializer.js
        cp frontend/public/static/js/person-initializer.js backend/app/static/js/
        
        # Copy any other static assets (if they exist)
        if [ -d "frontend/build/static/media" ]; then
          mkdir -p backend/app/static/assets/media
          cp -r frontend/build/static/media/* backend/app/static/assets/media/
        fi
        
        # Update path references in index.html
        sed -i 's|/static/js/|/js/|g' backend/app/static/index.html
        sed -i 's|/static/css/|/css/|g' backend/app/static/index.html
        sed -i 's|/static/media/|/assets/media/|g' backend/app/static/index.html
        
        # Debug: List files to verify
        echo "Files in backend/app/static:"
        find backend/app/static -type f | sort
        
    # Use the main Dockerfile which correctly handles frontend static files
    - name: Verify Static Files
      run: |
        echo "Verifying frontend static files before build:"
        find backend/app/static -type f | sort
        
        # Ensure static files are properly set up for the Docker build
        if [ ! -f "backend/app/static/index.html" ]; then
          echo "ERROR: index.html not found in static directory!"
          exit 1
        fi
        
        # Ensure JS files exist - check both the new and old structure for compatibility
        if [ ! -d "backend/app/static/js" ] && [ ! -d "backend/app/static/static/js" ]; then
          echo "ERROR: neither js nor static/js directory found!"
          exit 1
        fi
        
        echo "Static files verified and ready for Docker build"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: docker.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # All checks passed
  ci-success:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-lint, frontend-lint, security-scan, dependency-check]
    name: CI Success
    steps:
    - name: Success
      run: echo "All CI checks passed!"